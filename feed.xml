<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://www.dinhphu28.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://www.dinhphu28.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-18T04:28:13+00:00</updated><id>https://www.dinhphu28.com/feed.xml</id><title type="html">Dinh Phu Nguyen dinhphu28</title><subtitle>Dinh Phu Nguyen also know as dinhphu28 is a Software Engineer with high level experience in Java - Spring Boot, RESTful Web Service and software development. </subtitle><entry><title type="html">How to set up SSH Certificate Authentication with Your Own CA</title><link href="https://www.dinhphu28.com/blog/2025/how-to-set-up-ssh-certificate-authentication-with-your-own-ca/" rel="alternate" type="text/html" title="How to set up SSH Certificate Authentication with Your Own CA"/><published>2025-09-17T06:00:00+00:00</published><updated>2025-09-17T06:00:00+00:00</updated><id>https://www.dinhphu28.com/blog/2025/how-to-set-up-ssh-certificate-authentication-with-your-own-ca</id><content type="html" xml:base="https://www.dinhphu28.com/blog/2025/how-to-set-up-ssh-certificate-authentication-with-your-own-ca/"><![CDATA[<p><strong>TL;DR</strong>: SSH certificates replace traditional key management with a CA-based model. Hosts and users get signed certificates instead of raw keys, making authentication more secure, scalable, and easier to manage. This guide shows you how to set up your own SSH CA for both host and user authentication.</p> <h2 id="introduction">Introduction</h2> <p>Managing SSH keys at scale is difficult:</p> <ul> <li>Password authentication is insecure.</li> <li>TOFU (Trust On First Use) introduces risks.</li> <li>Distributing and updating keys across servers is a hassle.</li> <li>Offboarding requires manual cleanup on every host.</li> </ul> <p>SSH certificate authentication solves these problems by using a <strong>Certificate Authority (CA)</strong> to sign and verify both host and user keys.</p> <h2 id="benefits">Benefits</h2> <ul> <li>Centralized management of keys</li> <li>Simplified distribution and revocation</li> <li>Stronger authentication with signatures</li> <li>Easier onboarding and offboarding</li> </ul> <h2 id="how-it-works">How It Works</h2> <ul> <li><strong>Host CA</strong> signs server keys</li> <li><strong>User CA</strong> signs client keys</li> <li>Server trusts the User CA to verify users</li> <li>Client trusts the Host CA to verify servers</li> </ul> <p>Connection flow:</p> <ol> <li>Server presents signed host certificate ‚Üí client verifies against Host CA</li> <li>Client presents signed user certificate ‚Üí server verifies against User CA</li> </ol> <h2 id="setup">Setup</h2> <h3 id="1-generate-ca-keys">1. Generate CA keys</h3> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-f</span> user_ca_key <span class="nt">-C</span> dinhphu28_user_ca
ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-f</span> host_ca_key <span class="nt">-C</span> dinhphu28_host_ca
</code></pre></div></div> <p>Keep the private keys secure.</p> <h3 id="2-host-certificate">2. Host certificate</h3> <p>On the server:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-f</span> ssh_host_ed25519_key <span class="nt">-N</span> <span class="s1">''</span> <span class="nt">-t</span> ed25519
</code></pre></div></div> <p>Sign with Host CA:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-s</span> host_ca_key <span class="nt">-I</span> dinhphu28-mac-machine <span class="nt">-h</span> <span class="se">\</span>
  <span class="nt">-n</span> <span class="s2">"example-host.dinhphu28.com,10.8.0.6"</span> <span class="nt">-V</span> +365d ssh_host_ed25519_key.pub
</code></pre></div></div> <h3 id="3-configure-server">3. Configure server</h3> <p><code class="language-plaintext highlighter-rouge">/etc/ssh/sshd_config</code>:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HostKey /usr/etc/ssh/ssh_host_ed25519_key
HostCertificate /usr/etc/ssh/ssh_host_ed25519_key-cert.pub
TrustedUserCAKeys /usr/etc/ssh/user_ca_key.pub
</code></pre></div></div> <p>Restart sshd:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart sshd
</code></pre></div></div> <h3 id="4-user-certificate">4. User certificate</h3> <p>On the client:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-C</span> <span class="s2">"robert@dinhphu28.com"</span>
</code></pre></div></div> <p>Sign with User CA:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-s</span> user_ca_key <span class="nt">-I</span> <span class="s2">"robert@dinhphu28.com"</span> <span class="nt">-n</span> <span class="s2">"robert"</span> <span class="nt">-V</span> +1d id_ed25519.pub
</code></pre></div></div> <h3 id="5-configure-client">5. Configure client</h3> <p>Move cert to <code class="language-plaintext highlighter-rouge">~/.ssh/</code>. Add Host CA to <code class="language-plaintext highlighter-rouge">~/.ssh/known_hosts</code>:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@cert-authority *.dinhphu28.com,10.8.0.6 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFraYAO41YSLterrzte7TknguJWpTrCNC8MCL6xbcvbw
</code></pre></div></div> <h3 id="6-test">6. Test</h3> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-L</span> <span class="nt">-f</span> /path/to/your-cert.pub
ssh <span class="nt">-T</span> robert@example-host.dinhphu28.com
</code></pre></div></div> <h2 id="advanced">Advanced</h2> <p>Limitations of the basic setup:</p> <ul> <li>Revocation is manual</li> <li>Certificates have static expiration</li> </ul> <p>For larger environments, use automated solutions:</p> <ul> <li><a href="https://github.com/Netflix/bless">Netflix BLESS</a></li> <li><a href="https://developer.hashicorp.com/vault/docs/secrets/ssh">HashiCorp Vault SSH CA</a></li> </ul> <h2 id="conclusion">Conclusion</h2> <p>SSH certificate authentication provides scalable and secure management of users and hosts. With your own CA, you eliminate TOFU, simplify key distribution, and make onboarding/offboarding easier.</p>]]></content><author><name></name></author><category term="utilities"/><category term="ca"/><category term="openssh"/><category term="ssh"/><category term="security"/><category term="pki"/><summary type="html"><![CDATA[Learn how to set up SSH certificate authentication with your own CA to replace key distribution, improve security, and simplify management.]]></summary></entry><entry><title type="html">Build a Root and Intermediate Certificate Authority with Easy-RSA</title><link href="https://www.dinhphu28.com/blog/2025/build-a-root-and-intermediate-certificate-authority-with-easy-rsa/" rel="alternate" type="text/html" title="Build a Root and Intermediate Certificate Authority with Easy-RSA"/><published>2025-07-14T11:00:00+00:00</published><updated>2025-07-14T11:00:00+00:00</updated><id>https://www.dinhphu28.com/blog/2025/build-a-root-and-intermediate-certificate-authority-with-easy-rsa</id><content type="html" xml:base="https://www.dinhphu28.com/blog/2025/build-a-root-and-intermediate-certificate-authority-with-easy-rsa/"><![CDATA[<blockquote> <p>üìñ This post continues from <a href="/blog/2025/why-build-your-own-certificate-authority">Part 1: Why Build Your Own Certificate Authority</a></p> </blockquote> <h2 id="root-ca-setup">Root CA Setup</h2> <h3 id="1-download-and-extract-easy-rsa">1. Download and Extract Easy-RSA</h3> <p>Optionally rename the directory to <code class="language-plaintext highlighter-rouge">root-ca</code>.</p> <h3 id="2-create-or-edit-the-vars-file">2. Create or Edit the <code class="language-plaintext highlighter-rouge">vars</code> File</h3> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set_var EASYRSA_REQ_COUNTRY    <span class="s2">"VN"</span>
set_var EASYRSA_REQ_PROVINCE   <span class="s2">"Ho Chi Minh City"</span>
set_var EASYRSA_REQ_CITY       <span class="s2">"Ho Chi Minh City"</span>
set_var EASYRSA_REQ_ORG        <span class="s2">"DINHPHU28 Root CA"</span>
set_var EASYRSA_REQ_EMAIL      <span class="s2">"ca@dinhphu28.com"</span>
set_var EASYRSA_REQ_OU         <span class="s2">"Community"</span>
set_var EASYRSA_ALGO           <span class="s2">"ec"</span>
set_var EASYRSA_DIGEST         <span class="s2">"sha512"</span>
set_var EASYRSA_CURVE          <span class="s2">"secp384r1"</span>
</code></pre></div></div> <h3 id="3-initialize-the-pki">3. Initialize the PKI</h3> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa init-pki
</code></pre></div></div> <h3 id="4-build-the-root-ca">4. Build the Root CA</h3> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa build-ca
</code></pre></div></div> <blockquote> <p>üîê Remember the password ‚Äî this secures your CA.</p> </blockquote> <p>You now have:</p> <ul> <li><code class="language-plaintext highlighter-rouge">pki/private/ca.key</code></li> <li><code class="language-plaintext highlighter-rouge">pki/ca.crt</code> (Root certificate)</li> </ul> <h3 id="5-create-custom-x509-type-for-intermediate-ca">5. Create Custom x509 Type for Intermediate CA</h3> <p>Create <code class="language-plaintext highlighter-rouge">x509-types/caRestricted</code>:</p> <div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">basicConstraints</span> <span class="p">=</span> <span class="s">critical, CA:TRUE, pathlen:0</span>
<span class="py">subjectKeyIdentifier</span> <span class="p">=</span> <span class="s">hash</span>
<span class="py">authorityKeyIdentifier</span> <span class="p">=</span> <span class="s">keyid:always,issuer:always</span>
<span class="py">keyUsage</span> <span class="p">=</span> <span class="s">critical, cRLSign, keyCertSign</span>
</code></pre></div></div> <h2 id="intermediate-ca-setup">Intermediate CA Setup</h2> <p>Repeat steps 1‚Äì3 in a new directory like <code class="language-plaintext highlighter-rouge">intermediate-ca</code>, then update <code class="language-plaintext highlighter-rouge">vars</code>:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set_var EASYRSA_REQ_ORG        <span class="s2">"DINHPHU28 EC CA"</span>
set_var EASYRSA_REQ_OU         <span class="s2">"Intermediate"</span>
</code></pre></div></div> <h3 id="1-initialize-and-create-request">1. Initialize and Create Request</h3> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa init-pki
./easyrsa gen-req intermediate-ca
</code></pre></div></div> <p>Transfer <code class="language-plaintext highlighter-rouge">intermediate-ca.req</code> to the <strong>offline Root CA</strong>.</p> <h3 id="2-at-the-root-ca">2. At the Root CA</h3> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa import-req /path/to/intermediate-ca.req intermediate-ca
<span class="nv">EASYRSA_NO_SAN</span><span class="o">=</span>1 ./easyrsa sign-req caRestricted intermediate-ca
</code></pre></div></div> <h3 id="3-back-at-intermediate-ca">3. Back at Intermediate CA</h3> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /path/to/intermediate-ca.crt pki/ca.crt
<span class="nb">cp</span> /path/to/root-ca/pki/ca.crt pki/root-ca.crt
<span class="nb">cat </span>pki/ca.crt pki/root-ca.crt <span class="o">&gt;</span> pki/ca-chain.crt
</code></pre></div></div> <p>In case system warns missing files/directories, create them:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">touch </span>pki/serial
<span class="nb">mkdir </span>pki/certs_by_serial
</code></pre></div></div> <p>You now have a functional Intermediate CA.</p> <h2 id="issue-certificate-for-microsoft-365-authentication">Issue Certificate for Microsoft 365 Authentication</h2> <h3 id="1-create-openssl-config">1. Create OpenSSL Config</h3> <p>Save as <code class="language-plaintext highlighter-rouge">user_openssl.cnf</code>:</p> <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[ req ]</span>
<span class="py">default_bits</span>       <span class="p">=</span> <span class="s">384</span>
<span class="py">prompt</span>             <span class="p">=</span> <span class="s">no</span>
<span class="py">distinguished_name</span> <span class="p">=</span> <span class="s">dn</span>
<span class="py">req_extensions</span>     <span class="p">=</span> <span class="s">req_ext</span>
<span class="py">string_mask</span>        <span class="p">=</span> <span class="s">utf8only</span>
<span class="py">default_md</span>         <span class="p">=</span> <span class="s">sha512</span>

<span class="nn">[ dn ]</span>
<span class="py">CN</span> <span class="p">=</span> <span class="s">Dinh Phu Nguyen</span>

<span class="nn">[ req_ext ]</span>
<span class="py">subjectAltName</span> <span class="p">=</span> <span class="s">@alt_names</span>

<span class="nn">[ alt_names ]</span>
<span class="py">otherName</span> <span class="p">=</span> <span class="s">1.3.6.1.4.1.311.20.2.3;UTF8:dinhphu@office.dinhphu28.com</span>
</code></pre></div></div> <h3 id="2-generate-key-and-csr">2. Generate Key and CSR</h3> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl ecparam <span class="nt">-name</span> secp384r1 <span class="nt">-genkey</span> <span class="nt">-noout</span> <span class="nt">-out</span> dinhphu.key
openssl req <span class="nt">-new</span> <span class="nt">-key</span> dinhphu.key <span class="nt">-out</span> dinhphu.csr <span class="nt">-config</span> user_openssl.cnf
</code></pre></div></div> <h3 id="3-sign-the-csr-at-intermediate-ca">3. Sign the CSR at Intermediate CA</h3> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./easyrsa import-req /full/path/to/dinhphu.csr dinhphu
<span class="nv">EASYRSA_CERT_EXPIRE</span><span class="o">=</span>60 ./easyrsa <span class="nt">--subject-alt-name</span><span class="o">=</span><span class="s2">"otherName:1.3.6.1.4.1.311.20.2.3;UTF8:dinhphu@office.dinhphu28.com"</span> sign-req client dinhphu
</code></pre></div></div> <h3 id="4-verify-upn">4. Verify UPN</h3> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl x509 <span class="nt">-in</span> pki/issued/dinhphu.crt <span class="nt">-noout</span> <span class="nt">-text</span> | <span class="nb">grep</span> <span class="nt">-A5</span> <span class="s2">"Subject Alternative Name"</span>
</code></pre></div></div> <p>Should contain your UPN like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>X509v3 Subject Alternative Name:
    otherName:1.3.6.1.4.1.311.20.2.3;UTF8:dinhphu@office.dinhphu28.com
</code></pre></div></div> <p><strong>Note:</strong> Above client cert <code class="language-plaintext highlighter-rouge">dinhphu.crt</code> is only contain client cert.</p> <p>To verify the client cert valid, we not only need the Root CA cert but also Intermediate CA (full chain of trust): <code class="language-plaintext highlighter-rouge">Root CA -&gt; Intermediate CA -&gt; Client cert</code></p> <p>Most of SSL Tools or System use use client cert with fullchain (intermediate-ca -&gt; leaf) to verify the client with only Root CA cert.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /path/to/intermediate-ca/pki/ca.crt dinhphu.crt <span class="o">&gt;</span> dinhphu-fullchain.crt
</code></pre></div></div> <h2 id="create-pfx-certificate">Create PFX Certificate</h2> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl pkcs12 <span class="nt">-export</span> <span class="se">\</span>
  <span class="nt">-inkey</span> dinhphu.key <span class="se">\</span>
  <span class="nt">-in</span> dinhphu.crt <span class="se">\</span>
  <span class="nt">-certfile</span> /path-to/ca-chain.crt <span class="se">\</span>
  <span class="nt">-out</span> dinhphu.pfx <span class="se">\</span>
  <span class="nt">-name</span> <span class="s2">"Dinh Phu Nguyen"</span>
</code></pre></div></div> <blockquote> <p>You‚Äôll be prompted for a password to protect the <code class="language-plaintext highlighter-rouge">.pfx</code>.</p> </blockquote> <h3 id="optional-macos-conversion">Optional: macOS Conversion</h3> <p>Because of this <code class="language-plaintext highlighter-rouge">pfx</code> using pkcs12 is not compatible with macOS, so we need to convert it to legacy.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl pkcs12 <span class="nt">-in</span> dinhphu.pfx <span class="nt">-out</span> dinhphu.pem
openssl pkcs12 <span class="nt">-export</span> <span class="nt">-in</span> dinhphu.pem <span class="nt">-out</span> dinhphu_macos.pfx <span class="nt">-legacy</span>
</code></pre></div></div> <h2 id="microsoft-entra-configuration-notes">Microsoft Entra Configuration Notes</h2> <h3 id="authentication-binding">Authentication Binding</h3> <table> <thead> <tr> <th>Certificate Attribute</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>Policy OID</td> <td><code class="language-plaintext highlighter-rouge">1.3.6.1.4.1.311.20.2.2</code></td> </tr> <tr> <td>Authentication strength</td> <td>Multi-factor</td> </tr> <tr> <td>Affinity binding</td> <td>Low</td> </tr> </tbody> </table> <p><strong>Add rule:</strong> Policy OID</p> <ul> <li>Certificate attribute: Policy OID</li> <li>Policy OID: <code class="language-plaintext highlighter-rouge">1.3.6.1.4.1.311.20.2.2</code></li> <li>Authentication strength: Mutli-factor authentication</li> <li>Affinity binding: Low</li> </ul> <h3 id="username-binding">Username Binding</h3> <table> <thead> <tr> <th>Certificate field</th> <th>Affinity binding</th> <th>User attribute</th> </tr> </thead> <tbody> <tr> <td>PrincipalName</td> <td>Low</td> <td>userPrincipalName</td> </tr> <tr> <td>RFC822Name</td> <td>Low</td> <td>userPrincipalName</td> </tr> </tbody> </table> <p><a href="https://learn.microsoft.com/en-us/entra/identity/authentication/how-to-certificate-based-authentication#step-4-configure-username-binding-policy">Microsoft Docs ‚Äì Certificate-Based Authentication</a></p> <h2 id="wrapping-up">Wrapping Up</h2> <p>You‚Äôve now built a secure, scalable two-tier Certificate Authority using Easy-RSA:</p> <ul> <li>A Root CA that remains offline for maximum trust</li> <li>An Intermediate CA that handles day-to-day certificate issuance</li> <li>End-entity certificates for services like Microsoft 365 with UPN-based binding</li> <li>Exportable PFX files and compatibility with various systems including macOS</li> </ul> <p>This setup not only strengthens your internal security posture but also gives you complete control over your certificate lifecycle, policies, and trust relationships.</p> <h2 id="whats-next">What‚Äôs Next?</h2> <p>In the upcoming article, I‚Äôll share how I manage <strong>SSH access for a large number of users and servers</strong>, using a certificate-based and policy-driven approach to simplify operations and tighten security.</p> <p>If you‚Äôre building out a lab, managing production systems, or exploring PKI for your org ‚Äî you‚Äôre on the right path. Feel free to leave questions or comments below.</p> <p>Happy cert-ing!</p>]]></content><author><name></name></author><category term="utilities"/><category term="ssl"/><category term="ca"/><category term="easy-rsa"/><category term="openssl"/><category term="security"/><category term="tutorial"/><summary type="html"><![CDATA[Step-by-step guide to building a Root CA and Intermediate CA using Easy-RSA, including issuing certificates for Microsoft 365 authentication.]]></summary></entry><entry><title type="html">Why Build Your Own Certificate Authority</title><link href="https://www.dinhphu28.com/blog/2025/why-build-your-own-certificate-authority/" rel="alternate" type="text/html" title="Why Build Your Own Certificate Authority"/><published>2025-07-14T07:30:00+00:00</published><updated>2025-07-14T07:30:00+00:00</updated><id>https://www.dinhphu28.com/blog/2025/why-build-your-own-certificate-authority</id><content type="html" xml:base="https://www.dinhphu28.com/blog/2025/why-build-your-own-certificate-authority/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Managing a large number of users or devices in an organization - or even a home lab - introduces several challenges:</p> <ul> <li>Data security and privacy</li> <li>Establishing trust between systems</li> <li>Ensuring integrity of data and systems</li> <li>Automating access and lifecycle management</li> <li>Providing phishing-resistant authentication</li> </ul> <h2 id="use-cases-for-certificate-based-authentication">Use Cases for Certificate-Based Authentication</h2> <p>CA (Certificate Authority) can be used for securing many kinds of infrastructure, such as:</p> <ul> <li>Securing web servers (HTTPS)</li> <li>VPN authentication</li> <li>Email encryption (S/MIME)</li> <li>IoT device identity</li> <li>Cloud services and API trust</li> <li>Mutual TLS (mTLS) authentication</li> </ul> <h2 id="self-signed-vs-public-cas">Self-Signed vs. Public CAs</h2> <p>When evaluating certificate options, you may consider self-signed certificates or public Certificate Authorities (CAs). However:</p> <h3 id="self-signed-certificates">Self-Signed Certificates</h3> <ul> <li>Not trusted by browsers or operating systems by default</li> <li>Difficult to distribute and manage in large environments</li> </ul> <h3 id="public-certificate-authorities">Public Certificate Authorities</h3> <ul> <li>Can be expensive for many certificates</li> <li>Offer limited control over certificate lifecycle or policy</li> </ul> <h2 id="the-better-alternative-build-your-own-ca">The Better Alternative: Build Your Own CA</h2> <p>By building your own Certificate Authority using tools like <strong>Easy-RSA</strong>, you gain:</p> <ul> <li>Complete control over your PKI</li> <li>Zero cost per certificate</li> <li>Ability to define your own trust policies and usage</li> </ul> <p>Easy-RSA is a simple yet powerful command-line utility to manage your own Public Key Infrastructure (PKI).</p> <p>This gives you <strong>total control</strong>, <strong>zero recurring cost</strong>, and the ability to build a trust model that suits your environment.</p> <h2 id="two-tier-ca-hierarchy">Two-Tier CA Hierarchy</h2> <p>A best practice is to create:</p> <ul> <li><strong>Root CA</strong>: Offline, used only to sign Intermediate CA</li> <li><strong>Intermediate CA</strong>: Actively issues end-entity certificates</li> </ul> <blockquote> <p>üîê Keep the Root CA offline to minimize security risks.</p> <p>Only use it when necessary to sign or revoke Intermediate CAs.</p> </blockquote> <pre><code class="language-mermaid">graph TD
    RootCA["üõ°Ô∏è Root CA (Offline) - Signs Intermediate CA"]
    CRLRoot["üìÑ Root CRL (Exported)"]
    IntermediateCA["üîÑ Intermediate CA (Online) - Signs End-Entity Certs"]
    CRLInt["üìÑ Intermediate CRL"]
    WebServer["üåê Web Server"]
    EmailCert["üìß Email Client"]
    VPNCert["üîê VPN Device"]

    RootCA --&gt;|Sign| IntermediateCA
    RootCA --&gt;|Publish| CRLRoot
    IntermediateCA --&gt;|Publish| CRLInt
    IntermediateCA --&gt;|Issue| WebServer
    IntermediateCA --&gt;|Issue| EmailCert
    IntermediateCA --&gt;|Issue| VPNCert
</code></pre> <h2 id="my-real-world-case">My Real-World Case</h2> <p>Let me share a bit of context. In my home lab, I manage:</p> <ul> <li>OpenVPN servers</li> <li>Microsoft 365 identity integrations</li> <li>Internal web applications</li> <li>Secure email with S/MIME</li> </ul> <p>Each time I added a new device or user, managing credentials was painful. Building a CA infrastructure simplified trust, reduced manual effort, and enabled automation.</p> <h2 id="whats-next">What‚Äôs Next?</h2> <p>In <a href="/blog/2025/build-a-root-and-intermediate-certificate-authority-with-easy-rsa">Part 2</a>, I‚Äôll walk you through the exact steps I used to build a Root CA, an Intermediate CA, and generate certificates with Easy-RSA.</p> <p>Stay tuned!</p>]]></content><author><name></name></author><category term="utilities"/><category term="ssl"/><category term="ca"/><category term="openssl"/><category term="easy-rsa"/><category term="security"/><category term="pki"/><summary type="html"><![CDATA[Explore the challenges of managing secure identities in your infrastructure, and why setting up your own Certificate Authority (CA) is the right solution.]]></summary></entry><entry><title type="html">ZRAM and how I deal with the memory usage in my Linux system</title><link href="https://www.dinhphu28.com/blog/2025/zram-swap/" rel="alternate" type="text/html" title="ZRAM and how I deal with the memory usage in my Linux system"/><published>2025-05-30T08:09:00+00:00</published><updated>2025-05-30T08:09:00+00:00</updated><id>https://www.dinhphu28.com/blog/2025/zram-swap</id><content type="html" xml:base="https://www.dinhphu28.com/blog/2025/zram-swap/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>I started using Linux in 2018 on a laptop with 4GB of RAM and a dual-core CPU.</p> <p>At first, I was happy with how my system performed. But over time, I noticed it becoming slower, especially as memory usage increased. Occasionally, the system would freeze for a few seconds, and I had to wait for it to respond again.</p> <p>I thought enabling swap might help improve performance. At the time, I didn‚Äôt know about ZRAM, so I simply enabled traditional disk-based swap.</p> <p>Thanks to the SSD, swap access was relatively fast‚Äîbut still, the system didn‚Äôt feel as responsive as before, especially when I had multiple applications open.</p> <p>For a long time, I believed swap was the only solution to extend memory. Then I discovered <strong>ZRAM</strong>, and I began learning how it works and how to make use of it.</p> <h2 id="what-is-zram">What is ZRAM?</h2> <p><strong>ZRAM</strong> is a Linux kernel module that creates compressed, RAM-based block devices. These virtual devices can be used either as swap space or as general-purpose RAM disks.</p> <p>Yes, you read that right‚Äî<strong>swap space stored in RAM</strong> instead of on disk.</p> <p>At this point, you might be thinking: <em>‚ÄúIsn‚Äôt swap supposed to expand available memory? Why would we use our already limited RAM for it?‚Äù</em></p> <p>That‚Äôs where ZRAM‚Äôs magic lies. By compressing data before storing it in RAM, ZRAM allows you to store more data in the same amount of memory. This makes your system feel like it has more RAM‚Äîwithout touching your disk.</p> <h2 id="how-does-zram-swap-work">How does ZRAM swap work?</h2> <p>Unlike traditional swap, which stores data on disk, <strong>ZRAM compresses and stores swap data directly in RAM</strong>.</p> <p>This means you can fit more data into your available memory. For example, with 4GB of physical RAM, ZRAM might effectively give you the equivalent of 6GB‚Äîdepending on the compressibility of your data.</p> <p>Since RAM is significantly faster than any disk, this results in <strong>better system responsiveness</strong>, especially under memory pressure.</p> <p>Of course, compression and decompression use CPU resources. On low-end CPUs, this overhead might cause a performance hit. But on modern processors, it‚Äôs usually negligible‚Äîand the benefit of having ‚Äúmore RAM‚Äù tends to outweigh the cost.</p> <p>ZRAM supports several compression algorithms, such as <strong>LZO</strong>, <strong>LZ4</strong>, <strong>ZSTD</strong>, and others. Personally, I prefer <strong>ZSTD</strong> because it strikes a good balance between speed and compression ratio. It‚Äôs also the default in <strong>openSUSE Tumbleweed</strong>.</p> <h2 id="enabling-zram">Enabling ZRAM</h2> <p>For openSUSE Tumbleweed, enable ZRAM is easy. Just run the following command:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>zypper <span class="nb">install </span>systemd-zram-service <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>zramswapon
</code></pre></div></div> <p>For Debian/Ubuntu, you can install the <code class="language-plaintext highlighter-rouge">zram-config</code> package:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>zram-config
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>zram-config
<span class="nb">sudo </span>systemctl start zram-config
</code></pre></div></div> <p>Because of ZRAM swap (data compression), data should be pushed into ZRAM as soon as possible. Swappiness should be <code class="language-plaintext highlighter-rouge">180</code>.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>sysctl vm.swappiness<span class="o">=</span>180
</code></pre></div></div> <p>With <code class="language-plaintext highlighter-rouge">zstd</code>, <code class="language-plaintext highlighter-rouge">vm.page-cluster</code> should be <code class="language-plaintext highlighter-rouge">0</code> because of decompression.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>sysctl vm.page-cluster<span class="o">=</span>0
</code></pre></div></div> <h2 id="conclusion">Conclusion</h2> <p>I‚Äôve been using <strong>ZRAM</strong> for a while now, and I can confidently say it has significantly improved my system‚Äôs performance. At the very least, it allows me to open dozens of browser tabs and run multiple applications without noticeable slowdowns.</p> <p>That said, ZRAM is <strong>not a replacement for physical RAM</strong>. Instead, it‚Äôs a smart way to make better use of the RAM you already have‚Äîespecially under memory pressure.</p> <p>If your system has plenty of RAM, ZRAM might not be necessary. In fact, the CPU overhead for compression and decompression could slightly degrade performance in such cases.</p> <p>But if you‚Äôre working with a <strong>low-end system or limited RAM</strong>, ZRAM can be a game-changer. It provides a noticeable performance boost with minimal setup.</p> <p>Thanks for reading! I hope you found this post helpful.</p> <p>If you have any questions or suggestions, feel free to leave a comment below.</p> <p><strong>Next time</strong>, we‚Äôll look at how some popular operating systems handle memory management and swap strategies.</p> <p>References:</p> <ul> <li>https://www.kernel.org/doc/html/latest/admin-guide/blockdev/zram.html</li> <li>https://dev.to/archerallstars/lets-fine-tune-your-zram-aka-free-ram-in-opensuse-with-zstandard-aka-zstd-4eap</li> </ul>]]></content><author><name></name></author><category term="utilities"/><category term="linux"/><summary type="html"><![CDATA[Sharing my experience with ZRAM on Linux‚Äîhow it helped my low-RAM laptop feel faster by using compressed swap in RAM.]]></summary></entry><entry><title type="html">P2P - UDP Hole Punching</title><link href="https://www.dinhphu28.com/blog/2024/udp-hole-punching/" rel="alternate" type="text/html" title="P2P - UDP Hole Punching"/><published>2024-11-29T04:59:00+00:00</published><updated>2024-11-29T04:59:00+00:00</updated><id>https://www.dinhphu28.com/blog/2024/udp-hole-punching</id><content type="html" xml:base="https://www.dinhphu28.com/blog/2024/udp-hole-punching/"><![CDATA[<h3 id="introduction">Introduction</h3> <p>UDP hole punching is a technique for establishing bidirectional UDP connections between two networked devices behind NATs.</p> <p>But this technique is not always applicable because of multiple types of NATs.</p> <p>In this article, we will discuss the UDP hole punching concept and how it works.</p> <h3 id="what-is-nat">What is NAT?</h3> <p>Because of the limited availability of IPv4, Network Address Translation (NAT) was introduced to allow multiple devices to share a single public IP address.</p> <p>NAT remaps the private IP:port of devices in private networks to a public IP:port.</p> <p>There are multiple types of NATs, but for simplicity, we can categorize them into 2 types: Symmetric and anything else.</p> <ul> <li>Symmetric NAT remaps the public port depending on the endpoint.</li> <li>Other types of NATs are independent.</li> </ul> <h3 id="how-does-udp-hole-punching-work">How does UDP hole punching work?</h3> <p>This technique is originally to solve the firewall problem, because this problem is about NAT &amp; firewall. So we assume that the NAT is include firewall.</p> <p>Not as TCP, UDP is connectionless and doesn‚Äôt have a handshake mechanism. So when we send a packet out, it doesn‚Äôt care that it will reach the destination or not, and any packet coming back is considered as a response.</p> <p>Assume that we have known public IP:port of A and B.</p> <p>Idea of UDP hole punching is tricking NATs to allow incoming packets from the destination. There are 2 step to archive this:</p> <ul> <li>A sends a packet to B (this packet will be lost because B is also behind NAT)</li> <li>B sends a packet to A, because NAT considers this as a response, packet will be allowed to pass</li> </ul> <p>But problem of NAT is we don‚Äôt know the public port of A and B. So we need a third party to help us, this is a device at the public side can see both public side of A and B. It‚Äôs called STUN server.</p> <p>STUN server listens on a well-known port and when A and B want to establish a connection, they send a request to STUN server to get their public IP:port.</p> <p>Then A and B exchange their public IP:port and send a packet to each other to establish a connection.</p> <p>Because of endpoint independent, non-symmetric NAT always remaps the private IP:port to a fixed public IP:port, the port they get from STUN when sending request is the same when sending packet to each other.</p> <p>Let do a simple example with netcat:</p> <p>Server S‚Äôs IP: <em>14.123.124.125</em></p> <ol> <li>Server S listening on 3478/UDP (act as a STUN server)</li> </ol> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-luvn</span> 3478
</code></pre></div></div> <ol> <li>Client A send a request to S on 3478/UDP</li> </ol> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-vu</span> <span class="nt">-p</span> 50001 14.123.124.125 3478
</code></pre></div></div> <p>We can see the source IP:port is <strong><em>11.100.101.102:23241</em></strong></p> <ol> <li>Back to step 1</li> <li>Client B send a request to S on 3478/UDP</li> </ol> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-vu</span> <span class="nt">-p</span> 50002 14.123.124.125 3478
</code></pre></div></div> <p>We can see the source IP:port is <strong><em>12.100.101.201:37261</em></strong></p> <p>Now we have known public IP:port of A and B</p> <p>Establish the P2P connection:</p> <ol> <li>A send a request to B on <strong><em>37261</em></strong></li> </ol> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-vu</span> <span class="nt">-p</span> 50001 12.100.101.201 37261
</code></pre></div></div> <p>Nothing happened</p> <ol> <li>B send a request to A on <strong><em>23241</em></strong></li> </ol> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-vu</span> <span class="nt">-p</span> 50002 12.100.101.201 23241
</code></pre></div></div> <p>Now A and B have established a connection. Type something on A, we can see it on B and vice versa.</p> <p>But this just solve the non-symmetric NAT, for symmetric which we cannot predict the public port, we need a relay server call TURN.</p> <p>This is the last resort when STUN technique doesn‚Äôt work.</p> <h3 id="stun-turn-and-ice">STUN, TURN and ICE</h3> <p>Interactive Connectivity Establishment (ICE) is a standard for using STUN and TURN to provide a solution for NAT traversal.</p> <p>They are used in WebRTC, VoIP and many P2P applications.</p> <p>Mesh VPN is a good example of using ICE to establish a P2P connection.</p> <h3 id="conclusion">Conclusion</h3> <p>In this article, we have discussed the concept of UDP hole punching and how it works, and what is STUN, TURN, ICE and how they resolve the NAT traversal problem.</p> <p>In case you have any questions, feel free to ask or share your opinion in the comment section.</p> <p>If you care about my VPN setup with Hub and Spoke, read <a href="/blog/2024/hub-spoke-vpn/">this article</a></p>]]></content><author><name></name></author><category term="networking"/><category term="p2p"/><category term="nat"/><category term="stun"/><category term="ice"/><category term="network"/><summary type="html"><![CDATA[UDP hole punching is a technique for establishing bidirectional UDP connections between two networked devices behind NATs.]]></summary></entry><entry><title type="html">Hub and Spoke VPN, how it solve my working problem</title><link href="https://www.dinhphu28.com/blog/2024/hub-spoke-vpn/" rel="alternate" type="text/html" title="Hub and Spoke VPN, how it solve my working problem"/><published>2024-11-29T03:59:00+00:00</published><updated>2024-11-29T03:59:00+00:00</updated><id>https://www.dinhphu28.com/blog/2024/hub-spoke-vpn</id><content type="html" xml:base="https://www.dinhphu28.com/blog/2024/hub-spoke-vpn/"><![CDATA[<h3 id="introduction">Introduction</h3> <p>Hub &amp; Spoke VPN is a VPN network topology that connects multiple remote peers (spokes) to a central location (hub) to provide secure communication between them.</p> <p>Spokes can only communicate with each other through the hub. The hub is a single point of failure, so if we want a reliable network, we need to increase the availability of the hub.</p> <p>In this post, we will discuss the Hub &amp; Spoke VPN and how it solve the problem of working activity in the remote area.</p> <h3 id="problem">Problem</h3> <p>I‚Äôm a software engineer usually working in the office. But sometimes I need to work remotely from home, coffee shop, or other place. And I also want to build a server that can be accessed from anywhere securely.</p> <h3 id="what-we-need">What we need</h3> <pre><code class="language-mermaid">flowchart TB
    subgraph TOPOLOGY["&lt;i class='mdi mdi-cloud-outline'&gt;&lt;/i&gt; Topology"]
        direction TB

        hub[&lt;i class='fa fa-network-wired'&gt;&lt;/i&gt; Hub]
        homesrv[&lt;i class='fa fa-server'&gt;&lt;/i&gt; Home Server Expose 443/TCP]
        officepc[&lt;i class='fa fa-desktop'&gt;&lt;/i&gt; Office Computer]
        laptop[&lt;i class='fa fa-laptop'&gt;&lt;/i&gt; My Laptop]
        phone[&lt;i class='fa fa-mobile'&gt;&lt;/i&gt; My Phone]
        internet[&lt;i class='mdi mdi-earth'&gt;&lt;/i&gt; Internet]
    end

    hub -.-&gt;|VPN Tunnel| laptop
    hub -.-&gt;|VPN Tunnel| phone
    hub -.-&gt;|VPN Tunnel| homesrv
    hub -.-&gt;|VPN Tunnel| officepc

    internet -.-&gt;|Public Access 443/TCP| hub
    hub ---|NAT 443/TCP via Tunnel| homesrv

</code></pre> <ul> <li>A secure &amp; manageable network to setup VPN server (hub), so I will use my home network.</li> <li>A device acts as a VPN server (hub), it can be an old computer, Raspberry Pi or any device that can run VPN server software.</li> <li>One or more VPN clients (spokes), in my case, they are my laptop, smartphone and a personal server, all of them are in other locations and in different private networks.</li> </ul> <p>I will use OpenVPN because it can be installed on many platforms and easy to use. Make sure you have enabled client to client communication.</p> <p>My hub is a Raspberry Pi running Raspbian OS and iptables (default).</p> <p>Install OpenVPN client on personal server, laptop and any device you want to join the VPN network.</p> <p>Connect the VPN clients to the VPN server (hub) using the OpenVPN client software, setup auto connect. Boom! Now you can access your home server or other devices in the VPN network.</p> <p>In case you want to access the internet though the hub, setup the VPN server to route all traffic though it.</p> <p>Because I have a server and want to publish my some services to the Internet, I will setup port forwarding (NAT) on the hub to forward the traffic to the server. To optimize the bandwidth, the server which only listens traffic from the hub, only routing traffic of VPN subnet via tun interface, default is to the Internet.</p> <p>For some work that I need the office‚Äôs computer and some resources in the office‚Äôs network, connect the office‚Äôs computer to the VPN network then start a proxy server on this computer.</p> <h3 id="use-cases">Use cases</h3> <p>I usually use this setup for:</p> <ul> <li>Securely Internet access when I‚Äôm in public places.</li> <li>Access my home server and office‚Äôs computer from anywhere.</li> <li>Communicate with other devices in the VPN network.</li> <li>Seamlessly work in the remote area.</li> <li>Publish services to the Internet with server at any location.</li> </ul> <p>With me, working almost on the CLI, so with neovim, tmux, ssh and other tools, I can work seamlessly anywhere, any device which have terminal emulator and internet connection. I call this setup Unified Working Environment.</p> <h3 id="pros--cons">Pros &amp; Cons</h3> <h4 id="pros">Pros</h4> <ul> <li>Centralized communication</li> <li>Cost effective</li> <li>Easy to control security</li> </ul> <h4 id="cons">Cons</h4> <ul> <li> <p>Single point of failure</p> <blockquote> <p>Because hub is the central point, if it goes down, all spokes will lose connection to each other.</p> </blockquote> </li> <li> <p>Bottleneck</p> <blockquote> <p>All traffic between spokes must go through the hub, so the hub can be a bottleneck. So if you have many spokes and need high bandwidth, you can consider a mesh network. I suggest Tailscale, it‚Äôs easy to use and setup and can be used for free.</p> </blockquote> </li> </ul> <h3 id="conclusion">Conclusion</h3> <p>In this article, I will show you my hub &amp; spoke VPN setup and how it helps me in my working activities. I hope you can find it useful and apply it to your work.</p> <p>If you have any questions, suggestions or your own setup, please leave a comment below.</p>]]></content><author><name></name></author><category term="networking"/><category term="vpn"/><category term="network"/><category term="security"/><summary type="html"><![CDATA[Hub & Spoke VPN is a VPN network topology that connects multiple remote peers (spokes) to a central location (hub) to provide secure communication between them.]]></summary></entry><entry><title type="html">Generate password with command line in Linux or macOS</title><link href="https://www.dinhphu28.com/blog/2024/generate-password-cli/" rel="alternate" type="text/html" title="Generate password with command line in Linux or macOS"/><published>2024-11-09T09:16:00+00:00</published><updated>2024-11-09T09:16:00+00:00</updated><id>https://www.dinhphu28.com/blog/2024/generate-password-cli</id><content type="html" xml:base="https://www.dinhphu28.com/blog/2024/generate-password-cli/"><![CDATA[<p>Most websites or application require a strong password that contains a mix of letters, numbers and special characters. And to make it more secure, it should be unique and randomly generated for each account. If you are using Linux or macOS and usually work with command line, you can use it to generate without installing any additional application.</p> <h3 id="using-devurandom-or-devrandom">Using /dev/urandom or /dev/random</h3> <p>This is my favorite way to generate password because <code class="language-plaintext highlighter-rouge">/dev/urandom</code> and <code class="language-plaintext highlighter-rouge">/dev/random</code> are available in most Unix-like operating systems.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt; /dev/urandom <span class="nb">tr</span> <span class="nt">-dc</span> <span class="s1">'[:graph:]'</span> | <span class="nb">head</span> <span class="nt">-c32</span><span class="p">;</span> <span class="nb">echo</span>
</code></pre></div></div> <p>This command will create a random password with printable character, length is 32.</p> <p>In case that alphabet &amp; numeric character, use <code class="language-plaintext highlighter-rouge">alnum</code> instead of <code class="language-plaintext highlighter-rouge">graph</code>.</p> <p>For more information, see <code class="language-plaintext highlighter-rouge">tr</code> <a href="https://linuxcommand.org/lc3_man_pages/tr1.html">manpage</a></p> <p>With macOS, an error occur when run above command because of UTF-8. Just add LC_ALL=C as below:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt; /dev/urandom <span class="nv">LC_ALL</span><span class="o">=</span>C <span class="nb">tr</span> <span class="nt">-dc</span> <span class="s1">'[:graph:]'</span> | <span class="nb">head</span> <span class="nt">-c32</span><span class="p">;</span> <span class="nb">echo</span>
</code></pre></div></div> <h4 id="random">Random</h4> <p>/dev/random takes the random values from the entropy pool. If the entropy pool is empty, it will be blocked reading.</p> <h4 id="urandom-unlimited-random">URandom (Unlimited Random)</h4> <p>/dev/urandom is similar to /dev/random but in case that entropy pool is empty, it generate value using hashing argorithm such as: SHA, MD5, ‚Ä¶</p> <h4 id="in-term-of-security">In term of security</h4> <p>Because of high-quality randomness of /dev/random, it‚Äôs suitable for a password or a task focus on security.</p> <h3 id="using-openssl">Using openssl</h3> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl rand <span class="nt">-base64</span> 32
</code></pre></div></div> <p>This command can only generate a base64 string password.</p> <h3 id="using-date-and-hashing">Using date and hashing</h3> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">date</span> | md5
</code></pre></div></div> <p>It similar to openssl command, but it‚Äôs not really random like openssl or /dev/urandom.</p> <h3 id="using-gpg">Using gpg</h3> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--gen-random</span> 1 32
</code></pre></div></div>]]></content><author><name></name></author><category term="utilities"/><category term="cli"/><category term="password-generating"/><category term="command-line"/><category term="linux"/><category term="macos"/><summary type="html"><![CDATA[If you usually work with command line in Linux or macOS, you can use it to generate password without installing any additional application.]]></summary></entry><entry><title type="html">M√¨nh ƒë√£ chuy·ªÉn sang Fcitx5 thay v√¨ IBus Bamboo v√† IBus Unikey</title><link href="https://www.dinhphu28.com/blog/2024/fcitx5-unikey-go-tieng-viet/" rel="alternate" type="text/html" title="M√¨nh ƒë√£ chuy·ªÉn sang Fcitx5 thay v√¨ IBus Bamboo v√† IBus Unikey"/><published>2024-04-06T09:16:00+00:00</published><updated>2024-04-06T09:16:00+00:00</updated><id>https://www.dinhphu28.com/blog/2024/fcitx5-unikey-go-tieng-viet</id><content type="html" xml:base="https://www.dinhphu28.com/blog/2024/fcitx5-unikey-go-tieng-viet/"><![CDATA[<h3 id="gi·ªõi-thi·ªáu">Gi·ªõi thi·ªáu</h3> <p>Tr∆∞·ªõc ƒë√¢y l√∫c m·ªõi b∆∞·ªõc ch√¢n v√†o x√†i Linux c√°ch ƒë√¢y 6 nƒÉm, m√¨nh ƒë√£ b·∫Øt ƒë·∫ßu v·ªõi Ubuntu (GNOME) v√† IBus Unikey, sau m·ªôt th·ªùi gian c·∫£m th·∫•y b·ªô g√µ n√†y kh√¥ng ƒë√°p ·ª©ng ƒë∆∞·ª£c nhu c·∫ßu c·ªßa b·∫£n th√¢n, m√¨nh ƒë√£ t√¨m th·∫•y m·ªôt b·ªô g√µ t∆∞∆°ng t·ª± nh∆∞ng h·ªó tr·ª£ nhi·ªÅu t√≠nh nƒÉng h∆°n l√† IBus Bamboo v√† m√¨nh ƒë√£ x√†i ƒë·∫øn t·∫≠n ƒë·∫ßu nƒÉm 2024.</p> <p>Kho·∫£ng th·ªùi gian n√†y m√¨nh th∆∞·ªùng x√†i 2 distro ch√≠nh l√† Ubuntu r·ªìi sau ƒë√≥ l√† Fedora v·ªõi Desktop Environment l√† GNOME, m·ªçi th·ª© v·∫´n ho·∫°t ƒë·ªông kh√° t·ªët ƒë·∫πp, cho ƒë·∫øn m·ªôt ng√†y ƒë·∫ßu nƒÉm 2024, m√¨nh quy·∫øt ƒë·ªãnh chuy·ªÉn sang x√†i KDE Plasma (Wayland) tr√™n openSUSE Tumbleweed v√† ƒë√¢y l√† l√∫c m·ªçi v·∫•n ƒë·ªÅ b·∫Øt ƒë·∫ßu.</p> <p>Sau khi c√†i ƒë·∫∑t IBus Bamboo, ch·∫ø ƒë·ªô g√µ m·∫∑c ƒë·ªãnh g·∫°ch ch√¢n ƒë∆∞·ª£c ch·ªçn v√† m√¨nh kh√¥ng c√≥ c√°ch n√†o ƒë·ªÉ chuy·ªÉn ch·∫ø ƒë·ªô g√µ, ch·ªçn menu IBus tr√™n menu bar l·∫°i kh√¥ng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng, l√∫c hi·ªÉn th·ªã l√∫c kh√¥ng v√† c≈©ng hi·ªÉn th·ªã kh√¥ng ƒë√∫ng. Th·∫≠m ch√≠ m·ªôt khi menu hi·ªÉn th·ªã v√† hover v√†o ch·ªçn ‚ÄòCh·∫ø ƒë·ªô g√µ m·∫∑c ƒë·ªãnh‚Äô th√¨ ngay l·∫≠p t·ª©c menu b·ªã nh√°y m·ªôt c√°i v√† hidden lu√¥n, n·∫øu v·∫´n c·ªë g·∫Øng l√†m l·∫°i th√¨ s·∫Ω crash lu√¥n menu bar.</p> <p>M·ªôt v·∫•n ƒë·ªÅ n·ªØa m√¨nh g·∫∑p ph·∫£i l√† l√∫c ƒëang ƒë·ªÉ ch·∫ø ƒë·ªô ‚ÄòTi·∫øng Vi·ªát‚Äô do kh√¥ng chuy·ªÉn ƒë∆∞·ª£c ch·∫ø ƒë·ªô g√µ m·∫∑c ƒë·ªãnh n√™n g√µ password b·ªã l·ªô ra h·∫øt.</p> <p>L√∫c n√†y m√¨nh ƒë√£ t√¨m ƒë·∫øn m·ªôt b·ªô g√µ kh√°c l√† <code class="language-plaintext highlighter-rouge">fcitx5</code> v√† m·ªçi v·∫•n ƒë·ªÅ ƒë∆∞·ª£c gi·∫£i quy·∫øt.</p> <h3 id="c√†i-ƒë·∫∑t">C√†i ƒë·∫∑t</h3> <ul> <li>fcitx5</li> <li>fcitx5-qt</li> <li>fcitx5-gtk</li> <li>fcitx5-unikey</li> <li>kcm-fcitx5</li> </ul> <p>Hi·ªán m√¨nh ƒëang x√†i openSUSE Tumbleweed v√† c√≥ th·ªÉ c√†i t·ª´ c√°c resources sau:</p> <p>Truy c·∫≠p <a href="https://software.opensuse.org//download.html?project=openSUSE%3AFactory&amp;package=fcitx5">fcitx5</a>, <a href="">fcitx5-qt</a>, <a href="https://software.opensuse.org/package/fcitx5-gtk">fcitx5-gtk</a>, <a href="https://software.opensuse.org/download/package?package=fcitx5-unikey&amp;project=M17N">fcitx5-unikey</a>, <a href="https://software.opensuse.org/download/package?package=kcm5-fcitx&amp;project=openSUSE%3AFactory">kcm5-fcitx</a> t·∫£i xu·ªëng c√°c files .ymp (click download) v√† click to install (ƒë√¢y c≈©ng l√† m·ªôt ƒëi·ªÉm m√¨nh kh√° th√≠ch openSUSE so v·ªõi c√°c distro kh√°c t·ª´ng x√†i tr∆∞·ªõc ƒë√¢y) ho·∫∑c c≈©ng c√≥ th·ªÉ c√†i ƒë·∫∑t qua script:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>zypper addrepo https://download.opensuse.org/repositories/openSUSE:Factory/standard/openSUSE:Factory.repo
<span class="nb">sudo </span>zypper addrepo https://download.opensuse.org/repositories/M17N/openSUSE_Tumbleweed/M17N.repo
<span class="nb">sudo </span>zypper refresh
<span class="nb">sudo </span>zypper <span class="nb">install </span>fcitx5
<span class="nb">sudo </span>zypper <span class="nb">install </span>fcitx-qt5
<span class="nb">sudo </span>zypper <span class="nb">install </span>fcitx5-gtk
<span class="nb">sudo </span>zypper <span class="nb">install </span>kcm5-fcitx
<span class="nb">sudo </span>zypper <span class="nb">install </span>fcitx5-unikey
</code></pre></div></div> <p>ƒê·ªÉ ch·ªçn b·ªô g√µ, v√†o <code class="language-plaintext highlighter-rouge">System Settings</code> -&gt; <code class="language-plaintext highlighter-rouge">Virtual Keyboard</code> ch·ªçn fcitx5.</p> <p><strong><em>L∆∞u √Ω:</em></strong> N·∫øu x√†i Wayland, khi kh·ªüi ƒë·ªông c√°c app c√°c b·∫°n nh·ªõ th√™m c√°c options <code class="language-plaintext highlighter-rouge">--enable-features=UseOzonePlatform --ozone-platform=wayland --enable-wayland-ime</code>.</p> <p>V√≠ d·ª• khi m√¨nh x√†i Typora:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Typora <span class="nt">--enable-features</span><span class="o">=</span>UseOzonePlatform <span class="nt">--ozone-platform</span><span class="o">=</span>wayland <span class="nt">--enable-wayland-ime</span>
</code></pre></div></div> <p>Tuy nhi√™n m√¨nh th∆∞·ªùng t·∫°o/ch·ªânh s·ª≠a file <em>.desktop</em> r·ªìi th√™m options n√†y v√¥ lu√¥n ƒë·ªÉ m·ªü app cho ti·ªán.</p> <p>M√¨nh vi·∫øt b√†i n√†y nh·∫±m m·ª•c ƒë√≠ch chia s·∫ª tr·∫£i nghi·ªám g√µ Ti·∫øng Vi·ªát tr√™n linux c·ªßa c√° nh√¢n m√¨nh, ƒë·ªìng th·ªùi hy v·ªçng c√≥ th·ªÉ gi√∫p c√°c b·∫°n c≈©ng ƒë√£ v√† ƒëang g·∫∑p ph·∫£i v·∫•n ƒë·ªÅ t∆∞∆°ng t·ª± nh∆∞ m√¨nh.</p> <p>Theo m√¨nh, IBus Bamboo v·∫´n l√† b·ªô g√µ ho·∫°t ƒë·ªông r·∫•t t·ªët v·ªõi GNOME v√¨ m·ªôt kho·∫£ng th·ªùi gian g·∫ßn 6 nƒÉm m√¨nh v·∫´n h√†i l√≤ng v·ªõi n√≥, v√† fcitx5 l√† m·ªôt l·ª±a ch·ªçn t·ªët ƒë·ªëi v·ªõi KDE (√≠t nh·∫•t theo c·∫£m nh·∫≠n c·ªßa m√¨nh hi·ªán t·∫°i).</p> <p>M·ªôt s·ªë t√†i li·ªáu tham kh·∫£o th√™m:</p> <ul> <li>https://fcitx-im.org/wiki/Using_Fcitx_5_on_Wayland</li> </ul>]]></content><author><name></name></author><category term="utilities"/><category term="fcitx5"/><category term="unikey"/><category term="vietnamese"/><summary type="html"><![CDATA[B·ªô g√µ Ti·∫øng Vi·ªát thay th·∫ø cho IBus Unikey v√† IBus Bamboo]]></summary></entry></feed>