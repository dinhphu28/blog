<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://www.dinhphu28.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://www.dinhphu28.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-09T04:51:57+00:00</updated><id>https://www.dinhphu28.com/feed.xml</id><title type="html">Dinh Phu Nguyen dinhphu28</title><subtitle>Dinh Phu Nguyen also know as dinhphu28 is a Software Engineer with high level experience in Java - Spring Boot, RESTful Web Service and software development. </subtitle><entry><title type="html">Mình đã chuyển sang Fcitx5 thay vì IBus Bamboo và IBus Unikey</title><link href="https://www.dinhphu28.com/blog/2024/fcitx5-unikey-go-tieng-viet/" rel="alternate" type="text/html" title="Mình đã chuyển sang Fcitx5 thay vì IBus Bamboo và IBus Unikey"/><published>2024-04-06T23:16:00+00:00</published><updated>2024-04-06T23:16:00+00:00</updated><id>https://www.dinhphu28.com/blog/2024/fcitx5-unikey-go-tieng-viet</id><content type="html" xml:base="https://www.dinhphu28.com/blog/2024/fcitx5-unikey-go-tieng-viet/"><![CDATA[<h3 id="giới-thiệu">Giới thiệu</h3> <p>Trước đây lúc mới bước chân vào xài Linux cách đây 6 năm, mình đã bắt đầu với Ubuntu (GNOME) và IBus Unikey, sau một thời gian cảm thấy bộ gõ này không đáp ứng được nhu cầu của bản thân, mình đã tìm thấy một bộ gõ tương tự nhưng hỗ trợ nhiều tính năng hơn là IBus Bamboo và mình đã xài đến tận đầu năm 2024.</p> <p>Khoảng thời gian này mình thường xài 2 distro chính là Ubuntu rồi sau đó là Fedora với Desktop Environment là GNOME, mọi thứ vẫn hoạt động khá tốt đẹp, cho đến một ngày đầu năm 2024, mình quyết định chuyển sang xài KDE Plasma (Wayland) trên openSUSE Tumbleweed và đây là lúc mọi vấn đề bắt đầu.</p> <p>Sau khi cài đặt IBus Bamboo, chế độ gõ mặc định gạch chân được chọn và mình không có cách nào để chuyển chế độ gõ, chọn menu IBus trên menu bar lại không hoạt động bình thường, lúc hiển thị lúc không và cũng hiển thị không đúng. Thậm chí một khi menu hiển thị và hover vào chọn ‘Chế độ gõ mặc định’ thì ngay lập tức menu bị nháy một cái và hidden luôn, nếu vẫn cố gắng làm lại thì sẽ crash luôn menu bar.</p> <p>Một vấn đề nữa mình gặp phải là lúc đang để chế độ ‘Tiếng Việt’ do không chuyển được chế độ gõ mặc định nên gõ password bị lộ ra hết.</p> <p>Lúc này mình đã tìm đến một bộ gõ khác là <code class="language-plaintext highlighter-rouge">fcitx5</code> và mọi vấn đề được giải quyết.</p> <h3 id="cài-đặt">Cài đặt</h3> <ul> <li>fcitx5</li> <li>fcitx5-qt</li> <li>fcitx5-gtk</li> <li>fcitx5-unikey</li> <li>kcm-fcitx5</li> </ul> <p>Hiện mình đang xài openSUSE Tumbleweed và có thể cài từ các resources sau:</p> <p>Truy cập <a href="https://software.opensuse.org//download.html?project=openSUSE%3AFactory&amp;package=fcitx5">fcitx5</a>, <a href="">fcitx5-qt</a>, <a href="https://software.opensuse.org/package/fcitx5-gtk">fcitx5-gtk</a>, <a href="https://software.opensuse.org/download/package?package=fcitx5-unikey&amp;project=M17N">fcitx5-unikey</a>, <a href="https://software.opensuse.org/download/package?package=kcm5-fcitx&amp;project=openSUSE%3AFactory">kcm5-fcitx</a> tải xuống các files .ymp (click download) và click to install (đây cũng là một điểm mình khá thích openSUSE so với các distro khác từng xài trước đây) hoặc cũng có thể cài đặt qua script:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>zypper addrepo https://download.opensuse.org/repositories/openSUSE:Factory/standard/openSUSE:Factory.repo
<span class="nb">sudo </span>zypper addrepo https://download.opensuse.org/repositories/M17N/openSUSE_Tumbleweed/M17N.repo
<span class="nb">sudo </span>zypper refresh
<span class="nb">sudo </span>zypper <span class="nb">install </span>fcitx5
<span class="nb">sudo </span>zypper <span class="nb">install </span>fcitx-qt5
<span class="nb">sudo </span>zypper <span class="nb">install </span>fcitx5-gtk
<span class="nb">sudo </span>zypper <span class="nb">install </span>kcm5-fcitx
<span class="nb">sudo </span>zypper <span class="nb">install </span>fcitx5-unikey
</code></pre></div></div> <p>Để chọn bộ gõ, vào <code class="language-plaintext highlighter-rouge">System Settings</code> -&gt; <code class="language-plaintext highlighter-rouge">Virtual Keyboard</code> chọn fcitx5.</p> <p><strong><em>Lưu ý:</em></strong> Nếu xài Wayland, khi khởi động các app các bạn nhớ thêm các options <code class="language-plaintext highlighter-rouge">--enable-features=UseOzonePlatform --ozone-platform=wayland --enable-wayland-ime</code>.</p> <p>Ví dụ khi mình xài Typora:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Typora <span class="nt">--enable-features</span><span class="o">=</span>UseOzonePlatform <span class="nt">--ozone-platform</span><span class="o">=</span>wayland <span class="nt">--enable-wayland-ime</span>
</code></pre></div></div> <p>Tuy nhiên mình thường tạo/chỉnh sửa file <em>.desktop</em> rồi thêm options này vô luôn để mở app cho tiện.</p> <p>Mình viết bài này nhằm mục đích chia sẻ trải nghiệm gõ Tiếng Việt trên linux của cá nhân mình, đồng thời hy vọng có thể giúp các bạn cũng đã và đang gặp phải vấn đề tương tự như mình.</p> <p>Theo mình, IBus Bamboo vẫn là bộ gõ hoạt động rất tốt với GNOME vì một khoảng thời gian gần 6 năm mình vẫn hài lòng với nó, và fcitx5 là một lựa chọn tốt đối với KDE (ít nhất theo cảm nhận của mình hiện tại).</p> <p>Một số tài liệu tham khảo thêm:</p> <ul> <li>https://fcitx-im.org/wiki/Using_Fcitx_5_on_Wayland</li> </ul>]]></content><author><name></name></author><category term="utilities"/><category term="fcitx5"/><category term="unikey"/><category term="vietnamese"/><summary type="html"><![CDATA[Bộ gõ Tiếng Việt thay thế cho IBus Unikey và IBus Bamboo]]></summary></entry><entry><title type="html">SOLID principles</title><link href="https://www.dinhphu28.com/blog/2024/solid-principles/" rel="alternate" type="text/html" title="SOLID principles"/><published>2024-03-27T15:59:00+00:00</published><updated>2024-03-27T15:59:00+00:00</updated><id>https://www.dinhphu28.com/blog/2024/solid-principles</id><content type="html" xml:base="https://www.dinhphu28.com/blog/2024/solid-principles/"><![CDATA[<h3 id="introduction">Introduction</h3> <p>SOLID stands for:</p> <ul> <li> <p><strong>S</strong>ingle Responsibility Principle</p> </li> <li> <p><strong>O</strong>pen/Closed Principle</p> </li> <li> <p><strong>L</strong>iskov Substitution Principle</p> </li> <li> <p><strong>I</strong>nterface Segregation Principle</p> </li> <li> <p><strong>D</strong>ependency Inversion Principle</p> </li> </ul> <p>These principles is the experience of many software developers that led to a set of design principles that are more robust, more maintainable, and easier to understand.</p> <p>These principles is the experience of many software developers, taking from so many projects. SOLID principles were first introduced by Robert C. Martin (aka Uncle Bob) and writed in book called “Clean Architecture” of him. Yeah, he is a great software engineer and I’m a big fan of him.</p> <p>SOLID principles help us to create maintainable, scalable, readable, reusable and testable software.</p> <p>So if we can apply these principles, we will have a good software design, easier to create new features, reduce costs of so many things. At least, for developers, it will be easier to understand the code and maintain it.</p> <h3 id="the-single-responsibility-principle-srp">The Single Responsibility Principle (SRP)</h3> <blockquote> <p>A class should have one and only one reason to change, meaning that a class should have only one job.</p> </blockquote> <p>An active corollary to Conway’s law: The best structure for a software system is heavily influenced by the social structure of the organization that uses it so that each software module has one, and only one, reason to change. - Robert C. Martin</p> <h5 id="explaination">Explaination</h5> <p>For one class (one feature or anything) should do one thing, so when we need to change a peace of them, it will not affect the others.</p> <p>E.g. A class Employee as below violates SRP</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">phoneNumber</span><span class="o">;</span>

  <span class="c1">// Getter and Setter</span>

  <span class="c1">// (1)</span>
  <span class="kd">public</span> <span class="nc">EmployeeOutput</span> <span class="nf">toOutput</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">EmployeeOutput</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">EmployeeOutput</span><span class="o">(</span><span class="cm">/* something here */</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">output</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">saveToDatabase</span><span class="o">(</span><span class="nc">Employee</span> <span class="n">employee</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// some code here</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cache</span><span class="o">(</span><span class="nc">Employee</span> <span class="n">employee</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// some code here</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>Class Employee does more than 1 thing, and have more than reason to change.</p> <p>When we need to add more features, this class become bigger and hard to read and maintain.</p> <p>You can answer this question: “We need to change <code class="language-plaintext highlighter-rouge">saveToDatabase</code> but properties of Employee doesn’t need to change, why this method still be there?”</p> <p>You may think <code class="language-plaintext highlighter-rouge">saveToDatabase</code> and <code class="language-plaintext highlighter-rouge">cache</code> are relate to Employee so they should be there. But an Employee don’t need to save him to the database or cache himself.</p> <p>You can move <code class="language-plaintext highlighter-rouge">saveToDatabase</code> to class <strong>EmployeeRepository</strong>.</p> <p><strong>Bonus</strong>: <em>(1)</em></p> <p>You may wonder that why (1) be there. Yeah, someone put method mapping entity &lt;-&gt; model right there, but you should let this method in module/class model mapper.</p> <p>In additional, we should not set name <code class="language-plaintext highlighter-rouge">EmployeeOutput</code> and method name <code class="language-plaintext highlighter-rouge">toOutput</code>, which makes confused to read and understand them.</p> <h3 id="the-openclosed-principle-ocp">The Open/Closed Principle (OCP)</h3> <blockquote> <p>Objects or entities should be open for extension but closed for modification.</p> </blockquote> <p>Bertrand Meyer made this principle famous in the 1980s. The gist is that for software systems to be easy to change, they must be designed to allow the behavior of those systems to be changed by adding new code, rather than changing existing code. - Robert C. Martin</p> <h5 id="explaination-1">Explaination</h5> <p>A module should be:</p> <ul> <li>Easy to extend</li> <li>Not allowed to modify</li> </ul> <p>For example:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">bark</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// some code here</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cat</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">say</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// some code here</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AnimalSaying</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">say</span><span class="o">(</span><span class="nc">AnimalType</span> <span class="n">animalType</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">switch</span> <span class="o">(</span><span class="n">animalType</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">case</span> <span class="nl">DOG:</span>
        <span class="nc">Dog</span> <span class="n">dog</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">();</span>
        <span class="n">dog</span><span class="o">.</span><span class="na">bark</span><span class="o">();</span>
        <span class="k">break</span><span class="o">;</span>
      <span class="k">case</span> <span class="nl">CAT:</span>
        <span class="nc">Cat</span> <span class="n">cat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Cat</span><span class="o">();</span>
        <span class="n">cat</span><span class="o">.</span><span class="na">say</span><span class="o">();</span>
        <span class="k">break</span><span class="o">;</span>
      <span class="k">default</span><span class="o">:</span>
        <span class="k">throw</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"This animal does not exist!"</span><span class="o">)</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>In this example, when we want to add new animal, e.g. Duck, we need to add class <code class="language-plaintext highlighter-rouge">Duck</code> and edit class <code class="language-plaintext highlighter-rouge">AnimalSaying</code>. It make the code hard to extend and quite risky.</p> <p>We can re-write as below:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">say</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="kd">extends</span> <span class="nc">Animal</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">say</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// some code here</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cat</span> <span class="kd">extends</span> <span class="nc">Animal</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">say</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// some code here</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AnimalSaying</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">Animal</span> <span class="n">animal</span><span class="o">;</span>
  <span class="kd">public</span> <span class="nf">AnimalSaying</span><span class="o">(</span><span class="nc">Animal</span> <span class="n">animal</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">animal</span> <span class="o">=</span> <span class="n">animal</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">say</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">animal</span><span class="o">.</span><span class="na">say</span><span class="o">()</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>When we want to add <code class="language-plaintext highlighter-rouge">Duck</code>, we just need to add</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Duck</span> <span class="kd">extends</span> <span class="nc">Animal</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">say</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// some code here</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>Follow Open-Close principle, everything becomes easier to extends and does not make old feature failure because we don’t update it.</p> <h3 id="the-liskov-substitution-principle-lsp">The Liskov Substitution Principle (LSP)</h3> <blockquote> <p>Let q(x) be a property provable about objects of x of type T. Then q(y) should be provable for objects y of type S where S is a subtype of T.</p> </blockquote> <p>Barbara Liskov’s famous definition of subtypes, from 1988. In short, this principle says that to build software systems from interchangeable parts, those parts must adhere to a contract that allows those parts to be substituted one for another. - Robert C. Martin</p> <h3 id="the-interface-segregation-principle-isp">The Interface Segregation Principle (ISP)</h3> <blockquote> <p>A client should never be forced to implement an interface that it doesn’t use, or clients shouldn’t be forced to depend on methods they do not use.</p> </blockquote> <p>This principle advises software designers to avoid depending on things that they don’t use. - Robert C. Martin</p> <h3 id="the-dependency-inversion-principle-dip">The Dependency Inversion Principle (DIP)</h3> <blockquote> <p>Entities must depend on abstractions, not on concretions. It states that the high-level module must not depend on the low-level module, but they should depend on abstractions.</p> </blockquote> <p>The code that implements high-level policy should not depend on the code that implements low-level details. Rather, details should depend on policies. - Robert C. Martin</p> <p><strong><em>Some references:</em></strong></p> <ul> <li>https://www.digitalocean.com/community/conceptual-articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design#open-closed-principle</li> <li>Clean Architecture - Robert C. Martin [Book]</li> </ul>]]></content><author><name></name></author><category term="system-design"/><category term="oop"/><category term="principles"/><summary type="html"><![CDATA[SOLID is an acronym for the first five object-oriented design principles by Robert C. Martin]]></summary></entry><entry><title type="html">a post with redirect</title><link href="https://www.dinhphu28.com/blog/2022/redirect/" rel="alternate" type="text/html" title="a post with redirect"/><published>2022-02-01T17:39:00+00:00</published><updated>2022-02-01T17:39:00+00:00</updated><id>https://www.dinhphu28.com/blog/2022/redirect</id><content type="html" xml:base="https://www.dinhphu28.com/blog/2022/redirect/"><![CDATA[<p>Redirecting to another page.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[you can also redirect to assets like pdf]]></summary></entry></feed>